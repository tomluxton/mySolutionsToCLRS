Exercises
1.1-1
Describe your own real-world example that requires sorting. Describe
one that requires finding the shortest distance between two points.

A: Sorting cutlery into the right draws.
Finding the best bike path to take.

1.1-2
Other than speed, what other measures of efficiency might you need to
consider in a real-world setting?

A: How much space the program uses.
How much computing power is needed i.e. for cloud computing costs.

1.1-3
Select a data structure that you have seen, and discuss its strengths and
limitations.

A: Static Array. Strength: easy to initilise, efficent storing. Efficent search. 
Limitations: immutable so you need to create a new one to sort.

1.1-4
How are the shortest-path and traveling-salesperson problems given
above similar? How are they different?
Similar: Fiding path with shortest path
Different: Traveling sales person requires the shortest route for multiple objects traveling to multple destinations, and they need to go back to the same spot.

1.1-5
Suggest a real-world problem in which only the best solution will do.
Then come up with one in which “approximately” the best solution is
good enough.
Best: Calculating the intrest on a home loan.
Good enough: Find the best route for a taxi


1.1-6
Describe a real-world problem in which sometimes the entire input is
available before you need to solve the problem, but other times the input
is not entirely available in advance and arrives over time.

Entire: Scan a downloaded image to detect faces.
Not entire: Determining the best route for a minecraft speed run (procedually generated world)
